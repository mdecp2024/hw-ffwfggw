<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/41323216">https://github.com/mdecp2024/41323216</a></p>
<p>個人網站:<a class="Link--inTextBlock" href="https://mdecp2024.github.io/hw-ffwfggw/">https://mdecp2024.github.io/hw-ffwfggw/</a></p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p></p>
<h3>w10</h3>
<p>第一題</p>
<p><span>操作概要： 這部影片中使用了五種不同的方式去執行金字塔程式，模擬了在不同環境下去執行的方式與輸出的結果 心得： 在過程中我發現執行一個程式不是只有一種方法，各種模式有不同的優缺點，但是在用jupyter的過程我發現會報錯，應該是解壓縮不完全回去再試試看</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/hYRQx_X7xVw?si=jlGQ6FlX9loMulz5" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p>第二題</p>
<p>１.<strong><span>只能包含字母、數字和底線</span><code>_</code></strong><span>：變數名稱只能包含</span><code>a-z</code><span>、</span><code>A-Z</code><span>、</span><code>0-9</code><span>和</span><code>_</code><span>，不能包含空格或其他符號。</span></p>
<p><strong><span>    大小寫敏感</span></strong><span>：Python是大小寫敏感的語言，</span><code>myVariable</code><span>並且</span><code>myvariable</code><span>是兩個不同的變數名稱。</span></p>
<p><span>    <strong>不得以數字開頭</strong>：變數中後可有數字，但不得做為開頭。</span></p>
<p><span></span></p>
<p><span>2.避免<strong>使用Python關鍵字</strong><code>if</code>：關鍵字（keywords）是Python語言保留的單詞，具有特殊意義，不能作為變數名稱。</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/yznfiDx6XNw?si=g9B7ZltSPxMuQ9lD" title="YouTube video player" width="560"></iframe></p>
<p>第三題</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/5pSJF5Fk3Ws?si=vl-bpRRdLxLdT_7O" title="YouTube video player" width="560"></iframe></p>
<div id="tipue_search_content">
<p>以下方程式列印採用 <a href="https://www.mathjax.org/#gettingstarted">Mathjax Version 3 格式</a>.</p>
<script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<h4>set1 - Physics</h4>
<p><span style="background-color: #ccffcc;">Use python to solve the problem: A jet touches down at velocity 310 km/h. Find the constant acceleration required to stop the aircraft 1000 m down the runway.</span></p>
<p style="padding-left: 30px;">To solve this problem, we'll use the kinematic equations of motion under constant acceleration. The question asks for the constant acceleration required to stop the jet after a certain distance, which means we are looking for the deceleration.</p>
<p style="padding-left: 30px;">Step 1: Problem Breakdown</p>
<p style="padding-left: 30px;">We are given:<br/>- Initial velocity \( v_0 = 310 \, \text{km/h} \)<br/>- Final velocity \( v = 0 \, \text{m/s} \) (since the jet stops)<br/>- Distance \( d = 1000 \, \text{m} \)</p>
<p style="padding-left: 30px;">We are asked to find the constant acceleration \( a \) that brings the jet to a stop.</p>
<p style="padding-left: 30px;">Step 2: Kinematic Equation</p>
<p style="padding-left: 30px;">The appropriate kinematic equation for this problem, where the object is decelerating (i.e., stopping), is:</p>
<p style="padding-left: 30px;">\[<br/>v^2 = v_0^2 + 2ad<br/>\]</p>
<p style="padding-left: 30px;">Where:<br/>- \( v \) is the final velocity (which is 0 since the jet stops),<br/>- \( v_0 \) is the initial velocity,<br/>- \( a \) is the constant acceleration (which we need to solve for),<br/>- \( d \) is the distance traveled.</p>
<p style="padding-left: 30px;">Step 3: Solving for Acceleration \( a \)</p>
<p style="padding-left: 30px;">Rearranging the equation to solve for \( a \):</p>
<p style="padding-left: 30px;">\[<br/>a = \frac{v^2 - v_0^2}{2d}<br/>\]</p>
<p style="padding-left: 30px;">Since \( v = 0 \), this simplifies to:</p>
<p style="padding-left: 30px;">\[<br/>a = \frac{-v_0^2}{2d}<br/>\]</p>
<p style="padding-left: 30px;">Step 4: Converting Units</p>
<p style="padding-left: 30px;">The velocity \( v_0 = 310 \, \text{km/h} \) needs to be converted to meters per second (m/s) because the distance is in meters and we want the acceleration in meters per second squared (m/s²).</p>
<p style="padding-left: 30px;">\[<br/>v_0 = 310 \, \text{km/h} = \frac{310 \times 1000}{3600} \, \text{m/s} = 86.11 \, \text{m/s}<br/>\]</p>
<p style="padding-left: 30px;">Step 5: Substituting Known Values</p>
<p style="padding-left: 30px;">Now we can substitute the values into the equation:</p>
<p style="padding-left: 30px;">\[<br/>a = \frac{-(86.11)^2}{2 \times 1000}<br/>\]</p>
<p style="padding-left: 30px;">Let's calculate this using Python.</p>
<p style="padding-left: 30px;">Python Code Implementation: <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/d9558707c7e1765c1e6885ddc6919e32265c6d23/problem-set1-1_py.txt">problem-set1-1.py</a></p>
<p style="padding-left: 30px;"></p>
<p style="padding-left: 30px;">Use function to solve this kind of problem. <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/9567804babcc2fa9edc32403d76dcf2af4955bcf/problem-set1-2_py.txt">problem-set1-2.py</a></p>
<p style="padding-left: 30px;">Extend to be more general to solve all kind of these problems. <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/9567804babcc2fa9edc32403d76dcf2af4955bcf/problem-set1-3_py.txt">problem-set1-3.py</a></p>
<h4>set2- Calculus</h4>
<p><span style="background-color: #ccffcc;">Under ideal conditions a certain bacteria population is known to double every three hours. Suppose that there are initially 100 bacteria. When will the population first reach 50,000 ?</span></p>
<p style="padding-left: 30px;">We are asked to determine when a bacteria population, starting at 100 bacteria, will first reach 50,000, given that the population doubles every 3 hours.</p>
<p style="padding-left: 30px;">Exponential Growth Equation:</p>
<p style="padding-left: 30px;">The population growth can be modeled by the exponential growth formula:</p>
<p style="padding-left: 30px;">\[<br/>P(t) = P_0 \times 2^{\frac{t}{T}}<br/>\]</p>
<p style="padding-left: 30px;">Where:<br/>- \( P(t) \) is the population at time \( t \),<br/>- \( P_0 \) is the initial population,<br/>- \( T \) is the doubling time (in hours),<br/>- \( t \) is the time elapsed (in hours).</p>
<p style="padding-left: 30px;">Given:<br/>- \( P_0 = 100 \) (initial population),<br/>- \( T = 3 \) hours (doubling time),<br/>- \( P(t) = 50,000 \) (target population).</p>
<p style="padding-left: 30px;">Step 1: Plugging in the known values</p>
<p style="padding-left: 30px;">We want to find the time \( t \) when the population reaches 50,000. Substituting the known values into the growth equation:</p>
<p style="padding-left: 30px;">\[<br/>50,000 = 100 \times 2^{\frac{t}{3}}<br/>\]</p>
<p style="padding-left: 30px;">Step 2: Simplifying the equation</p>
<p style="padding-left: 30px;">First, divide both sides by 100 to isolate the exponential term:</p>
<p style="padding-left: 30px;">\[<br/>500 = 2^{\frac{t}{3}}<br/>\]</p>
<p style="padding-left: 30px;">Step 3: Solving for \( t \)</p>
<p style="padding-left: 30px;">To solve for \( t \), take the logarithm (base 2) of both sides of the equation:</p>
<p style="padding-left: 30px;">\[<br/>\log_2(500) = \frac{t}{3}<br/>\]</p>
<p style="padding-left: 30px;">Now, multiply both sides by 3 to solve for \( t \):</p>
<p style="padding-left: 30px;">\[<br/>t = 3 \times \log_2(500)<br/>\]</p>
<p style="padding-left: 30px;">Step 4: Change of Base Formula</p>
<p style="padding-left: 30px;">To compute \( \log_2(500) \) in Python or any other programming language, we can use the change of base formula:</p>
<p style="padding-left: 30px;">\[<br/>\log_2(x) = \frac{\log_{10}(x)}{\log_{10}(2)}<br/>\]</p>
<p style="padding-left: 30px;">Thus, the equation for \( t \) becomes:</p>
<p style="padding-left: 30px;">\[<br/>t = 3 \times \frac{\log_{10}(500)}{\log_{10}(2)}<br/>\]</p>
<p style="padding-left: 30px;">Python Code to Calculate \( t \): <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/d9558707c7e1765c1e6885ddc6919e32265c6d23/problem-set2-1_py.txt">problem-set2-1.py</a></p>
<p></p>
</div>
<h2>w4</h2>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from coppeliasim_zmqremoteapi_client import RemoteAPIClient
import time
import keyboard

# 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線
client = RemoteAPIClient('[::1]', 23000)
# 以 getObject 方法取得場景物件
sim = client.getObject('sim')
box = sim.getObject('/box')

# 啟動模擬
sim.startSimulation()

# 設定立方體的尺寸和初始位置
cube_size = 0.2  # 20 cm
spacing = 0.5  # 50 cm 之間的距離（可根據需求調整）

# 擺放立方體的行數和每行的數量
rows = 5  # 從第 1 行到第 5 行
cubes_in_row = [1, 3, 5, 7, 9]  # 每行立方體的數量

# 在正的 Y 方向擺放立方體
for row in range(rows):
    # 計算每行的起始 x 位置，讓其對稱
    start_row_x = - (cubes_in_row[row] - 1) * spacing / 2
    
    for col in range(cubes_in_row[row]):
        # 計算每個立方體的位置
        x_position = start_row_x + col * spacing
        y_position = row * spacing  # 垂直方向上每行間距
        
        # 建立立方體
        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)
        sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2])  # z 方向上升到立方體的中心

# 在負的 Y 方向擺放立方體
for row in range(rows):
    # 計算每行的起始 x 位置，讓其對稱
    start_row_x = - (cubes_in_row[row] - 1) * spacing / 2
    
    for col in range(cubes_in_row[row]):
        # 計算每個立方體的位置
        x_position = start_row_x + col * spacing
        y_position = -row * spacing  # 負的 Y 方向
        
        # 建立立方體
        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)
        sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2])  # z 方向上升到立方體的中心

# 完成立方體的擺放
print("立方體已成功擺放!")

# 設定主迴圈
while True:
    # 在這裡可以進行其他模擬操作
    time.sleep(0.1)  # 確保循環不會過快

    if keyboard.is_pressed('q'):
        # 可以按下 q 鍵跳出重複執行迴圈
        break

# 終止模擬
sim.stopSimulation()
</pre>
<h2>w5</h2>
<p><img alt="" height="490" src="/images/螢幕擷取畫面 2024-10-16 105843.png" width="800"/></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><main>
<div class="container">
<div>
<p id="content">德謨克里特在過去曾經講過，連一個高尚朋友都沒有的人，是不值得活的。這句話讓我們得到了一個全新的觀點去思考這個問題。看看別人，再想想自己，會發現問題的核心其實就在你身旁。我們不妨可以這樣來想: 福樓拜在過去曾經講過，人的一生中，最光輝的一天並非是功成名就那天，而是從悲嘆與絕望中產生對人生的挑戰，以勇敢邁向意志那天。這句話看似簡單，卻埋藏了深遠的意義。謹慎地來說，我們必須考慮到所有可能。學習程式python心得，到底應該如何實現。</p>
</div>
</div>
</main></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h2>w6</h2>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def print_pyramid(n):
    for i in range(n):
        # 打印空格
        print(' ' * (n - i - 1), end='')
        # 打印星号
        print('*' * (2 * i + 1))

# 设置金字塔高度
height = 5
print_pyramid(height)
def print_pyramid(n):
    for i in range(n):
        # 打印空格
        for j in range(n - i - 1):
            print(' ', end='')
        # 打印星号
        for j in range(2 * i + 1):
            print('*', end='')
        print()  # 换行</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">  *
   ***
  *****
 *******
*********
    *
   ***
  *****
 *******
*********
*****
*****
*****
*****
*****</pre>
<p></p>
<p><br/><br/><br/><br/></p>
<p><br/><br/><br/><br/></p>
<h2>w7</h2>
<p>利用python寫程式</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/JRmUtjr8e6o?si=POlr7M82L7FA8aC0" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p>如何做bython</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/yqJFAW-lpnI?si=HaCuIvRAXi8i2PsI" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p>如何上傳影片</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/NMe0zS9vFXI?si=O6hWQ0atESKCmQuk" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p><span> </span></p>
<h2>w11_hw</h2>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p><span>解: <a href="https://mdecp2024.github.io/hw-ffwfggw/content/Brython.html?src=https://gist.githubusercontent.com/ffwfggw/2728ae5a530b1c629684e6b8ad130cb4/raw/d67a1a33347acbcfb0e4dffbfa6c37c0a62823e3/hw1.py">"*" 字元</a></span></p>
<div>
<div class="syntaxhighlighter py" id="highlighter_582424">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py plain">n </code><code class="py keyword">=</code> <code class="py value">10</code>  <code class="py comments"># 定義區域大小為 10x10</code></div>
<div class="line number2 index1 alt1"><code class="py plain">center </code><code class="py keyword">=</code> <code class="py plain">(</code><code class="py value">5</code><code class="py plain">, </code><code class="py value">5</code><code class="py plain">)  </code><code class="py comments"># 圓心位置</code></div>
<div class="line number3 index2 alt2"><code class="py plain">radius </code><code class="py keyword">=</code> <code class="py value">4</code>  <code class="py comments"># 半徑</code></div>
<div class="line number4 index3 alt1"> </div>
<div class="line number5 index4 alt2"><code class="py comments"># 遍歷 10x10 的每一個位置</code></div>
<div class="line number6 index5 alt1"><code class="py keyword">for</code> <code class="py plain">y </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(n):</code></div>
<div class="line number7 index6 alt2"><code class="py spaces">    </code><code class="py keyword">for</code> <code class="py plain">x </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(n):</code></div>
<div class="line number8 index7 alt1"><code class="py spaces">        </code><code class="py comments"># 計算 (x, y) 距離圓心 (5, 5) 的距離</code></div>
<div class="line number9 index8 alt2"><code class="py spaces">        </code><code class="py plain">distance </code><code class="py keyword">=</code> <code class="py plain">((x </code><code class="py keyword">-</code> <code class="py plain">center[</code><code class="py value">0</code><code class="py plain">])</code><code class="py keyword">*</code><code class="py keyword">*</code><code class="py value">2</code> <code class="py keyword">+</code> <code class="py plain">(y </code><code class="py keyword">-</code> <code class="py plain">center[</code><code class="py value">1</code><code class="py plain">])</code><code class="py keyword">*</code><code class="py keyword">*</code><code class="py value">2</code><code class="py plain">)</code><code class="py keyword">*</code><code class="py keyword">*</code><code class="py value">0.5</code></div>
<div class="line number10 index9 alt1"><code class="py spaces">        </code><code class="py comments"># 若距離小於等於半徑，則顯示 *</code></div>
<div class="line number11 index10 alt2"><code class="py spaces">        </code><code class="py keyword">if</code> <code class="py plain">distance &lt;</code><code class="py keyword">=</code> <code class="py plain">radius:</code></div>
<div class="line number12 index11 alt1"><code class="py spaces">            </code><code class="py functions">print</code><code class="py plain">(</code><code class="py string">'*'</code><code class="py plain">, end</code><code class="py keyword">=</code><code class="py plain">'')</code></div>
<div class="line number13 index12 alt2"><code class="py spaces">        </code><code class="py keyword">else</code><code class="py plain">:</code></div>
<div class="line number14 index13 alt1"><code class="py spaces">            </code><code class="py functions">print</code><code class="py plain">(</code><code class="py string">' '</code><code class="py plain">, end</code><code class="py keyword">=</code><code class="py plain">'')</code></div>
<div class="line number15 index14 alt2"><code class="py spaces">    </code><code class="py comments"># 換行，開始新的一行</code></div>
<div class="line number16 index15 alt1"><code class="py spaces">    </code><code class="py functions">print</code><code class="py plain">()</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><br/><br/></p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/f95909804a1f134963cade8463eeb9bd32129ea8/grid_line_and_fill_in_Brython.py">網頁上的方格與塗色</a></p>
<p><span>解:<a href="https://mdecp2024.github.io/hw-ffwfggw/content/Brython.html?src=https://gist.githubusercontent.com/ffwfggw/fbe7188efdf08c5e75302174bdf9c018/raw/412f3ec405491baf5ea0e6226b55238244750d00/hw2.py">請設法修改此一程式</a></span></p>
<div>
<div class="syntaxhighlighter py" id="highlighter_882328">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
<div class="line number39 index38 alt2">39</div>
<div class="line number40 index39 alt1">40</div>
<div class="line number41 index40 alt2">41</div>
<div class="line number42 index41 alt1">42</div>
<div class="line number43 index42 alt2">43</div>
<div class="line number44 index43 alt1">44</div>
<div class="line number45 index44 alt2">45</div>
<div class="line number46 index45 alt1">46</div>
<div class="line number47 index46 alt2">47</div>
<div class="line number48 index47 alt1">48</div>
<div class="line number49 index48 alt2">49</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py keyword">from</code> <code class="py plain">browser </code><code class="py keyword">import</code> <code class="py plain">html</code></div>
<div class="line number2 index1 alt1"><code class="py keyword">from</code> <code class="py plain">browser </code><code class="py keyword">import</code> <code class="py plain">document as doc</code></div>
<div class="line number3 index2 alt2"> </div>
<div class="line number4 index3 alt1"><code class="py comments"># 利用 HTML 建立畫布超文件物件</code></div>
<div class="line number5 index4 alt2"><code class="py plain">canvas </code><code class="py keyword">=</code> <code class="py plain">html.CANVAS(width</code><code class="py keyword">=</code><code class="py value">400</code><code class="py plain">, height</code><code class="py keyword">=</code><code class="py value">400</code><code class="py plain">)</code></div>
<div class="line number6 index5 alt1"><code class="py plain">brython_div </code><code class="py keyword">=</code> <code class="py plain">doc[</code><code class="py string">"brython_div1"</code><code class="py plain">]</code></div>
<div class="line number7 index6 alt2"><code class="py plain">brython_div &lt;</code><code class="py keyword">=</code> <code class="py plain">canvas</code></div>
<div class="line number8 index7 alt1"> </div>
<div class="line number9 index8 alt2"><code class="py comments"># 每格的像素數</code></div>
<div class="line number10 index9 alt1"><code class="py plain">gs </code><code class="py keyword">=</code> <code class="py value">20</code>  <code class="py comments"># 每個格子的大小</code></div>
<div class="line number11 index10 alt2"> </div>
<div class="line number12 index11 alt1"><code class="py comments"># 取得畫布的 2D 繪圖上下文</code></div>
<div class="line number13 index12 alt2"><code class="py plain">ctx </code><code class="py keyword">=</code> <code class="py plain">canvas.getContext(</code><code class="py string">"2d"</code><code class="py plain">)</code></div>
<div class="line number14 index13 alt1"> </div>
<div class="line number15 index14 alt2"><code class="py comments"># 繪製矩形的函數</code></div>
<div class="line number16 index15 alt1"><code class="py keyword">def</code> <code class="py plain">dRect(lux, luy, w, h, s</code><code class="py keyword">=</code><code class="py value">1</code><code class="py plain">, c</code><code class="py keyword">=</code><code class="py string">'#ff0000'</code><code class="py plain">):</code></div>
<div class="line number17 index16 alt2"><code class="py spaces">    </code><code class="py plain">ctx.lineWidth </code><code class="py keyword">=</code> <code class="py plain">s</code></div>
<div class="line number18 index17 alt1"><code class="py spaces">    </code><code class="py plain">ctx.strokeStyle </code><code class="py keyword">=</code> <code class="py plain">c</code></div>
<div class="line number19 index18 alt2"><code class="py spaces">    </code><code class="py plain">ctx.beginPath()</code></div>
<div class="line number20 index19 alt1"><code class="py spaces">    </code><code class="py plain">ctx.rect(lux, luy, w, h)</code></div>
<div class="line number21 index20 alt2"><code class="py spaces">    </code><code class="py plain">ctx.stroke()</code></div>
<div class="line number22 index21 alt1"> </div>
<div class="line number23 index22 alt2"><code class="py comments"># 繪製 10x10 的格子</code></div>
<div class="line number24 index23 alt1"><code class="py keyword">def</code> <code class="py plain">grid(width, height, grid_pix):</code></div>
<div class="line number25 index24 alt2"><code class="py spaces">    </code><code class="py keyword">for</code> <code class="py plain">i </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(width):</code></div>
<div class="line number26 index25 alt1"><code class="py spaces">        </code><code class="py keyword">for</code> <code class="py plain">j </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(height):</code></div>
<div class="line number27 index26 alt2"><code class="py spaces">            </code><code class="py plain">dRect(i </code><code class="py keyword">*</code> <code class="py plain">grid_pix, j </code><code class="py keyword">*</code> <code class="py plain">grid_pix, grid_pix, grid_pix, </code><code class="py value">1</code><code class="py plain">, </code><code class="py string">"lightgrey"</code><code class="py plain">)</code></div>
<div class="line number28 index27 alt1"> </div>
<div class="line number29 index28 alt2"><code class="py comments"># 填充格子的函數</code></div>
<div class="line number30 index29 alt1"><code class="py keyword">def</code> <code class="py plain">fill(x, y, color):</code></div>
<div class="line number31 index30 alt2"><code class="py spaces">    </code><code class="py plain">ctx.fillStyle </code><code class="py keyword">=</code> <code class="py plain">color</code></div>
<div class="line number32 index31 alt1"><code class="py spaces">    </code><code class="py plain">ctx.fillRect(x </code><code class="py keyword">-</code> <code class="py value">1</code><code class="py plain">, y </code><code class="py keyword">-</code> <code class="py value">1</code><code class="py plain">, gs, gs)</code></div>
<div class="line number33 index32 alt2"> </div>
<div class="line number34 index33 alt1"><code class="py comments"># 在方格內繪製圓形</code></div>
<div class="line number35 index34 alt2"><code class="py keyword">def</code> <code class="py plain">draw_circle(center_x, center_y, radius, color):</code></div>
<div class="line number36 index35 alt1"><code class="py spaces">    </code><code class="py comments"># 計算圓心的座標在畫布上的位置 (需要考慮格子的大小)</code></div>
<div class="line number37 index36 alt2"><code class="py spaces">    </code><code class="py plain">cx </code><code class="py keyword">=</code> <code class="py plain">center_x </code><code class="py keyword">*</code> <code class="py plain">gs </code><code class="py keyword">+</code> <code class="py plain">gs </code><code class="py keyword">/</code> <code class="py value">2</code></div>
<div class="line number38 index37 alt1"><code class="py spaces">    </code><code class="py plain">cy </code><code class="py keyword">=</code> <code class="py plain">center_y </code><code class="py keyword">*</code> <code class="py plain">gs </code><code class="py keyword">+</code> <code class="py plain">gs </code><code class="py keyword">/</code> <code class="py value">2</code></div>
<div class="line number39 index38 alt2"><code class="py spaces">    </code> </div>
<div class="line number40 index39 alt1"><code class="py spaces">    </code><code class="py plain">ctx.fillStyle </code><code class="py keyword">=</code> <code class="py plain">color</code></div>
<div class="line number41 index40 alt2"><code class="py spaces">    </code><code class="py plain">ctx.beginPath()</code></div>
<div class="line number42 index41 alt1"><code class="py spaces">    </code><code class="py plain">ctx.arc(cx, cy, radius </code><code class="py keyword">*</code> <code class="py plain">gs, </code><code class="py value">0</code><code class="py plain">, </code><code class="py value">2</code> <code class="py keyword">*</code> <code class="py value">3.14159</code><code class="py plain">)  </code><code class="py comments"># 設定圓心座標與半徑</code></div>
<div class="line number43 index42 alt2"><code class="py spaces">    </code><code class="py plain">ctx.fill()</code></div>
<div class="line number44 index43 alt1"> </div>
<div class="line number45 index44 alt2"><code class="py comments"># 繪製 10x10 的格子</code></div>
<div class="line number46 index45 alt1"><code class="py plain">grid(</code><code class="py value">10</code><code class="py plain">, </code><code class="py value">10</code><code class="py plain">, gs)</code></div>
<div class="line number47 index46 alt2"> </div>
<div class="line number48 index47 alt1"><code class="py comments"># 繪製圓形，圓心在 (5,5)，半徑為 3</code></div>
<div class="line number49 index48 alt2"><code class="py plain">draw_circle(</code><code class="py value">5</code><code class="py plain">, </code><code class="py value">5</code><code class="py plain">, </code><code class="py value">3</code><code class="py plain">, </code><code class="py string">"black"</code><code class="py plain">)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><span> </span></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span>簡報</span>個人的解題過程與心得.</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/6eAKedqWN5U?si=LYy0u8ZG07IBooWo" title="YouTube video player" width="560"></iframe></p>
<p>11/27<span> </span><a href="https://mdecp2024.github.io/hw-ffwfggw/content/Brython.html?src=https://gist.githubusercontent.com/ffwfggw/85eb4cc659eaf1a75841e7287bcf901e/raw/a308e5f53d8691e6278f60247cc5bc11e16e5ffd/hw3.py">程式</a></p>
<div>
<div class="syntaxhighlighter py" id="highlighter_309695">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py plain">n</code><code class="py keyword">=</code><code class="py value">11</code> <code class="py comments">#總共行數</code></div>
<div class="line number2 index1 alt1"><code class="py plain">space </code><code class="py keyword">=</code> <code class="py string">'_'</code></div>
<div class="line number3 index2 alt2"><code class="py plain">center </code><code class="py keyword">=</code> <code class="py plain">n</code><code class="py keyword">/</code><code class="py keyword">/</code><code class="py value">2</code></div>
<div class="line number4 index3 alt1"><code class="py comments">#print(center)</code></div>
<div class="line number5 index4 alt2"> </div>
<div class="line number6 index5 alt1"><code class="py keyword">for</code> <code class="py plain">y </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(n):</code></div>
<div class="line number7 index6 alt2"><code class="py spaces">    </code><code class="py keyword">for</code> <code class="py plain">x </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(n):</code></div>
<div class="line number8 index7 alt1"><code class="py spaces">        </code><code class="py functions">print</code><code class="py plain">(</code><code class="py string">"("</code><code class="py plain">,x,</code><code class="py string">","</code><code class="py plain">,y,</code><code class="py string">")"</code><code class="py plain">,sep</code><code class="py keyword">=</code><code class="py plain">"")</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>   <span> </span><a href="https://mdecp2024.github.io/hw-ffwfggw/content/Brython.html?src=https://gist.githubusercontent.com/ffwfggw/2dd2796e8089126ebfeb90e82734776b/raw/d8141137cb0d29ae703542b92b24f373ca285abc/hw4.py"> 程式2</a></p>
<div>
<div class="syntaxhighlighter py" id="highlighter_157295">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py keyword">from</code> <code class="py plain">browser </code><code class="py keyword">import</code> <code class="py plain">html</code></div>
<div class="line number2 index1 alt1"><code class="py keyword">from</code> <code class="py plain">browser </code><code class="py keyword">import</code> <code class="py plain">document as doc</code></div>
<div class="line number3 index2 alt2"> </div>
<div class="line number4 index3 alt1"><code class="py comments"># 利用 html 建立 canvas 超文件物件</code></div>
<div class="line number5 index4 alt2"><code class="py plain">canvas </code><code class="py keyword">=</code> <code class="py plain">html.CANVAS(width </code><code class="py keyword">=</code> <code class="py value">400</code><code class="py plain">,height </code><code class="py keyword">=</code> <code class="py value">400</code><code class="py plain">)</code></div>
<div class="line number6 index5 alt1"><code class="py plain">brython_div </code><code class="py keyword">=</code> <code class="py plain">doc[</code><code class="py string">"brython_div1"</code><code class="py plain">]</code></div>
<div class="line number7 index6 alt2"><code class="py plain">brython_div &lt;</code><code class="py keyword">=</code> <code class="py plain">canvas</code></div>
<div class="line number8 index7 alt1"> </div>
<div class="line number9 index8 alt2"><code class="py comments"># 每一格的 pixel 數</code></div>
<div class="line number10 index9 alt1"><code class="py plain">gs </code><code class="py keyword">=</code> <code class="py value">20</code></div>
<div class="line number11 index10 alt2"> </div>
<div class="line number12 index11 alt1"><code class="py comments"># gs*tc = canvas width and height</code></div>
<div class="line number13 index12 alt2"> </div>
<div class="line number14 index13 alt1"><code class="py plain">ctx </code><code class="py keyword">=</code> <code class="py plain">canvas.getContext(</code><code class="py string">"2d"</code><code class="py plain">)</code></div>
<div class="line number15 index14 alt2"> </div>
<div class="line number16 index15 alt1"><code class="py plain">width</code><code class="py keyword">=</code><code class="py value">11</code></div>
<div class="line number17 index16 alt2"><code class="py plain">height</code><code class="py keyword">=</code><code class="py value">11</code></div>
<div class="line number18 index17 alt1"> </div>
<div class="line number19 index18 alt2"><code class="py comments">"""</code></div>
<div class="line number20 index19 alt1"><code class="py comments">ctx.lineWidth = 1</code></div>
<div class="line number21 index20 alt2"><code class="py comments">ctx.strokeStyle = 'lightgrey'</code></div>
<div class="line number22 index21 alt1"><code class="py comments">ctx.beginPath()</code></div>
<div class="line number23 index22 alt2"><code class="py comments">#ctx.rect(i*gs, j*gs, gs, gs)</code></div>
<div class="line number24 index23 alt1"><code class="py comments">ctx.rect(0, 0, 150, 100)</code></div>
<div class="line number25 index24 alt2"><code class="py comments">ctx.stroke()</code></div>
<div class="line number26 index25 alt1"><code class="py comments">"""</code></div>
<div class="line number27 index26 alt2"><code class="py keyword">for</code> <code class="py plain">i </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(width): </code></div>
<div class="line number28 index27 alt1"><code class="py spaces">    </code><code class="py keyword">for</code> <code class="py plain">j </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(height):</code></div>
<div class="line number29 index28 alt2"><code class="py spaces">     </code><code class="py comments">#dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")</code></div>
<div class="line number30 index29 alt1"><code class="py spaces">     </code><code class="py plain">ctx.lineWidth</code><code class="py keyword">=</code><code class="py value">1</code></div>
<div class="line number31 index30 alt2"><code class="py spaces">     </code><code class="py plain">ctx.strokeStyle</code><code class="py keyword">=</code><code class="py string">'lightgrey'</code></div>
<div class="line number32 index31 alt1"><code class="py spaces">     </code><code class="py plain">ctx.beginPath();</code></div>
<div class="line number33 index32 alt2"><code class="py spaces">     </code><code class="py plain">ctx.rect(i</code><code class="py keyword">*</code><code class="py plain">gs,j</code><code class="py keyword">*</code><code class="py plain">gs,gs,gs)</code></div>
<div class="line number34 index33 alt1"><code class="py spaces">     </code><code class="py plain">ctx.stroke();</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div><h2>w12_hw</h2>
<p>第一題                  </p>
<p><code>1-1<a href="https://mdecp2024.github.io/hw-ffwfggw/content/Brython.html?src=https://gist.githubusercontent.com/ffwfggw/fd5e9e791f2e69e0fefc3392ddc20f5c/raw/503d28218226208ae03f9f31fbf3dc276d2805c0/1.py">解 </a> </code></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">input("你叫啥")</pre>
<p><code>1-2<a href="https://mdecp2024.github.io/hw-ffwfggw/content/Brython.html?src=https://gist.githubusercontent.com/ffwfggw/fd5e9e791f2e69e0fefc3392ddc20f5c/raw/503d28218226208ae03f9f31fbf3dc276d2805c0/1-2.py">解</a>  </code></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"></pre>
<div>
<div class="syntaxhighlighter html" id="highlighter_671774">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">print ("   /\_/\   ")
print (" &gt;^.^&lt;   ")
print ("    / \    ")
print ("   (___)___")
</pre>
</div>
</div>
<p><code>  </code></p>
<p>第二題                     </p>
<p><a href="https://mdecp2024.github.io/hw-ffwfggw/content/Brython.html?src=https://gist.githubusercontent.com/ffwfggw/66cccb4938d0277b75f45ca9477bed32/raw/30d3eb8ab6842610bb7eb16e54c88d75b6ed9f86/2.py">解</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">first_name = "chou" #變數first_name為"自己的姓"
last_name  = "ryan" #變數last_name為"自己的名"
print (first_name) #列印變數first_name
print (last_name) #列印變數last_name</pre>
<p>第三題</p>
<p><a href="https://mdecp2024.github.io/hw-ffwfggw/content/Brython.html?src=https://gist.githubusercontent.com/ffwfggw/89e04b459214c59cbb30058d2b0619a5/raw/1d9257d121d9881d7edf42cc455aefe74e26ccab/3.py">解</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">programming_books = ["Learn python", "Python for all",  "Intro to python"] #在programming_books變數裡面有3個字串
print (programming_books) #列印programming_books變數(會出現三個字串)
wanted_book = input("Hi! What book would you like to buy?") #設定一個變數為wanted_book其等於input指令回傳之數值
print (wanted_book) #列印wanted_book變數
if wanted_book in programming_books: #如果 "變數wanted_book"回傳之值 在"programming_books"字串當中
    print ("Yes, we sell it!")       #列印 是的我們有販賣
else:                            #反之   
    print ("Sorry, we don't sell that book") #列印 抱歉我們沒有販賣</pre>
<p><br/><br/></p>
<p>第四題</p>
<p><a href="https://mdecp2024.github.io/hw-ffwfggw/content/Brython.html?src=https://gist.githubusercontent.com/ffwfggw/ea8b5631b09eed823c0d8e28d0677c9d/raw/d235de47f12b5bb71d1429877f5dbae5a242cf8b/4.py">解</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">shopping_list = ["carrots", "chocolate", "olives"] #在shopping_list變數裡面有3個字串
print (shopping_list) #列印shopping_list變數
new_item = input("What else do I have to buy?") #設定一個變數為new_item其等於input指令回傳之數值
 
if new_item in shopping_list:  #如果 "變數new_item(想買的物品)"回傳之值 在"shopping_list(購物清單)"字串當中就執行以下程式
    print (new_item + " is/are already in the shopping list") #列印 "new_item變數的數值"+字串is/are already in the shopping list
    print (shopping_list) #列印shopping_list字串
else:                    #反之
    shopping_list.append(new_item) #購物清單.加入(想要購買的物品)    如果不在購物清單內那就將未在字串中物品加入購物清單
    print (shopping_list) #列印購物清單
#以下是移除物品的程式
item_to_remove = input("What do I have to remove?") #item_to_remove(想要移除的物品)
 
if item_to_remove in shopping_list: #如果 想要移除的物品在購物清單中 那就執行
    shopping_list.remove(item_to_remove) #把購物清單.移除(想要移除的物品)
    print (shopping_list) #列印購物清單
else:                     #反之
    print (item_to_remove + " is/are not in the list") #列印 想要移除的物品+is/are not in the list(不在清單中)
    print (shopping_list) #列印購物清單</pre>
<p>第五題</p>
<p><a href="https://mdecp2024.github.io/hw-ffwfggw/content/Brython.html?src=https://gist.githubusercontent.com/ffwfggw/7e6998473444195273607f699411ea95/raw/7a476a7ba68aff2d9ab12432968d3bd4b47c6bab/5.py">解</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">todays_menu = ["burger", "salad", "coke"] #todays_menu變數=今天菜單["burger", "salad", "coke"
side_dish_index = todays_menu.index("salad") #side_dish_index變數 = 今日菜單.找出"沙拉"位於字串中第幾個
print (side_dish_index) #列印side_dish_index  列印他在第幾位
todays_menu.pop(side_dish_index) #今日菜單.移除字串中的元素(side_dish_index變數"沙拉")  這裡意思是移除沙拉
print (todays_menu) #列印今日菜單
todays_menu.insert(side_dish_index, "fries") #今日菜單.在字串中插入(side_dish_index, "fries")   這裡意思是加入薯條
print (todays_menu) #列印今日菜單</pre>
<div class="line number1 index0 alt2"><code class="py plain"></code></div>
<p><code>print()</code><span> </span>是 Python 的內建函數，用於將指定的內容輸出到控制台（標準輸出設備）。</p>
<p>它可以輸出各種類型的數據，包括字串、數字、列表、字典等。</p>
<p>詳細資料:<a href="https://realnewbie.com/coding/python/python-print/#ftoc-heading-2">https://realnewbie.com/coding/python/python-print/#ftoc-heading-2</a>                      </p>
<p></p><h2>w13</h2>
<p><a href="https://mdecp2024.github.io/hw--ffwfggw/content/Brython.html?src=https://gist.githubusercontent.com/ffwfggw/adab16fe07d69aac80511ec476fb3c84/raw/61ff883b61b13e511e99830d6ec8bfa51ac2a986/1.py">上課題目</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html #導入html函式庫
from browser import document as doc #導入document程式庫並在程式中命名(簡寫)為doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width = 400,height = 400) #將變數canvas指定為html.CANVAS(width = 400,height = 400) 
#意思是建立*(準備)一個400*400的空間(畫布)
brython_div = doc["brython_div1"] #將變數brython_div指定為doc["brython_div1"]
brython_div &lt;= canvas #將canve指定為子元素加入倒brython_div中

# 每一格的 pixel 數
gs = 200 

# gs*tc = canvas width and height

ctx = canvas.getContext("2d") #將ctx指定(簡寫)為canvas.getContext("2d") (獲取畫布（canvas）的 2D 繪圖上下文 (context))
width=1 #方形的寬
height=1 #方形的高

#第一個方形
for i in range(width): 
    for j in range(height):
     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")
     ctx.lineWidth=1
     ctx.strokeStyle='red'
     ctx.beginPath();
     ctx.rect(i*gs,j*gs,gs,gs)
     ctx.stroke();
     
#第二個偏移的方形
for i in range(width): 
    for j in range(height):
     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")
     ctx.lineWidth=1
     ctx.strokeStyle='red'
     ctx.beginPath();
     ctx.rect(i*gs+100,j*gs+100,gs,gs)      #gs+100代表往右下偏移100像素
     ctx.stroke();
</pre>
<p>w13 作業:</p>
<p>請在下列圖形中的兩個正方形外圍, 以黑色畫筆畫圓, 並設法在各線條所圍成的封閉區域塗上不同顏色. 操作過程請拍攝影片, 並在頁面中列出作業心得.</p>
<p><a href="https://mdecp2024.github.io/hw-ffwfggw/content/Brython.html?src=https://gist.githubusercontent.com/ffwfggw/d4108f2658da04e5a45cffd98273afcb/raw/5f138b460793491c17fd9ab0689d22408d814096/1.py">解</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1  # 設定邊框線寬

# 繪製對角線，顏色設定為藍色
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath()
ctx.moveTo(20, 20)  # 調整起點位置
ctx.lineTo(100, 100)  # 終點設為大正方形的右下角
ctx.stroke()

# 繪製外接圓，圓心位於第一個矩形的中央
center_x1 = 20 + 80 / 2  # 第一個矩形的X中心
center_y1 = 20 + 80 / 2  # 第一個矩形的Y中心

# 半徑為第一個矩形對角線的一半
radius1 = (80 * (2 ** 0.5)) / 2

# 繪製外接圓
ctx.strokeStyle = 'green'  # 設定圓的顏色為綠色
ctx.beginPath()
ctx.arc(center_x1, center_y1, radius1, 0, 2 * 3.14159)  # 圓心 (center_x1, center_y1) 和半徑
ctx.stroke()

# 繪製外接圓，圓心位於第二個矩形的中央
center_x2 = 60 + 80 / 2  # 第二個矩形的X中心
center_y2 = 60 + 80 / 2  # 第二個矩形的Y中心

# 半徑為第二個矩形對角線的一半
radius2 = (80 * (2 ** 0.5)) / 2

# 繪製外接圓
ctx.strokeStyle = 'purple'  # 設定圓的顏色為紫色
ctx.beginPath()
ctx.arc(center_x2, center_y2, radius2, 0, 2 * 3.14159)  # 圓心 (center_x2, center_y2) 和半徑
ctx.stroke()

# 繪製第一個矩形，並填充顏色
ctx.fillStyle = 'yellow'  # 設定填充顏色為黃色
ctx.strokeStyle = 'red'   # 設定邊框顏色為紅色

ctx.rect(20, 20, 80, 80)  # 設定矩形的位置和大小，縮小為 80x80
ctx.stroke()  # 繪製邊框
ctx.beginPath()

# 繪製第二個矩形
ctx.strokeStyle = 'red'    # 設定邊框顏色為紅色
ctx.beginPath()
ctx.rect(60, 60, 80, 80)  # 設定第二個矩形的位置和大小，縮小為 60x60
ctx.stroke()  # 繪製邊框

# 填充圓形的區域，排除與正方形的重疊部分
ctx.globalCompositeOperation = 'source-over'  # 設定為填充模式
ctx.fillStyle = 'lightblue'  # 設定圓形內部填充顏色為淺藍色

# 填充第一個圓形
ctx.beginPath()
ctx.arc(center_x1, center_y1, radius1, 0, 2 * 3.14159)
ctx.fill()

# 填充第二個圓形
ctx.beginPath()
ctx.arc(center_x2, center_y2, radius2, 0, 2 * 3.14159)
ctx.fill()

# 刪除圓形與正方形重疊的區域
ctx.globalCompositeOperation = 'destination-out'  # 設定為刪除重疊區域模式

# 刪除第一個圓與正方形重疊的區域
ctx.beginPath()
ctx.rect(20, 20, 80, 80)  # 第一個矩形區域
ctx.fill()

# 刪除第二個圓與正方形重疊的區域
ctx.beginPath()
ctx.rect(60, 60, 80, 80)  # 第二個矩形區域
ctx.fill()

# 填充重疊區域的顏色（位於兩個正方形重疊的區域）
ctx.globalCompositeOperation = 'source-over'  # 恢復填充模式
ctx.fillStyle = 'orange'  # 設定重疊區域填充顏色為橙色

# 填充第一個矩形的內部
ctx.globalCompositeOperation = 'source-over'  # 設定為填充模式
ctx.fillStyle = 'lightyellow'  # 設定填充顏色
ctx.beginPath()
ctx.rect(20, 20, 80, 80)  # 第一個矩形區域
ctx.fill()

# 填充第二個矩形的內部
ctx.fillStyle = 'orange'  # 設定填充顏色
ctx.beginPath()
ctx.rect(60, 60, 80, 80)  # 第二個矩形區域
ctx.fill()

# 填充第一個圓形和矩形之間的空白區域
ctx.fillStyle = 'lightblue'  # 設定填充顏色
ctx.beginPath()
ctx.arc(center_x1, center_y1, radius1, 0, 2 * 3.14159)
ctx.rect(20, 20, 80, 80)  # 使用複合模式
ctx.globalCompositeOperation = 'destination-over'  # 填充背景模式
ctx.fill()

# 填充第二個圓形和矩形之間的空白區域
ctx.fillStyle = 'pink'  # 設定填充顏色
ctx.beginPath()
ctx.arc(center_x2, center_y2, radius2, 0, 2 * 3.14159)
ctx.rect(60, 60, 80, 80)  # 使用複合模式
ctx.globalCompositeOperation = 'destination-over'
ctx.fill()

# 重置繪圖操作模式
ctx.globalCompositeOperation = 'source-over'

# 重疊區域填充
ctx.beginPath()
ctx.rect(60, 60, 40, 40)  # 重疊區域的範圍 (兩個矩形重疊部分)
ctx.fill()

# 重新繪製斜線，確保它在最上層
ctx.strokeStyle = 'blue'  # 設定斜線顏色為藍色
ctx.beginPath()
ctx.moveTo(20, 20)
ctx.lineTo(100, 100)  # 斜線終點設為大正方形的右下角
ctx.stroke()

# 最後繪製所有的邊框，確保線條不被遮蓋
ctx.strokeStyle = 'red'   # 第一個矩形的邊框顏色
ctx.beginPath()
ctx.rect(20, 20, 80, 80)  # 第一個矩形的位置和大小
ctx.stroke()

ctx.strokeStyle = 'red'  # 第二個矩形的邊框顏色
ctx.beginPath()
ctx.rect(60, 60, 80, 80)  # 第二個矩形的位置和大小
ctx.stroke()

ctx.strokeStyle = 'black'  # 圓形邊框顏色
ctx.beginPath()
ctx.arc(center_x1, center_y1, radius1, 0, 2 * 3.14159)  # 第一個圓
ctx.stroke()

ctx.beginPath()
ctx.arc(center_x2, center_y2, radius2, 0, 2 * 3.14159)  # 第二個圓
ctx.stroke()</pre>
<p><br/><br/></p>
<p></p><h2>w14_ex</h2>
<p><span>請根據兩個圓繪圖所圍成的</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/0e370b2ad0c429ab4c8905244022c27cfca8cfba/two_cicle_fill_ex1.py">區域</a><span>(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務.</span></p>
<p><a href="https://mdecp2024.github.io/hw-ffwfggw/content/Brython.html?src=https://gist.githubusercontent.com/ffwfggw/c0f7f883dd6084798afc750739d7a3af/raw/d513ca1af9455cbe433044c5c60994158b660cdc/1.py">解</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)  # 调整画布大小以容纳圆形
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")

grid_size = 10
ctx.lineWidth = 1

# HTML 表单，用于用户输入圆心和半径
def create_input_form():
    # 创建表单元素
    form_div = html.DIV(id="form-div")
    form_div &lt;= html.H3("请输入圆心坐标和半径:")
    
    # 创建输入框和标签
    form_div &lt;= html.LABEL("第一个圆心X坐标: ")
    form_div &lt;= html.INPUT(id="circle1_center_x", value="200")  # 默认值200
    form_div &lt;= html.BR()
    
    form_div &lt;= html.LABEL("第一个圆心Y坐标: ")
    form_div &lt;= html.INPUT(id="circle1_center_y", value="200")  # 默认值200
    form_div &lt;= html.BR()
    
    form_div &lt;= html.LABEL("第一个圆半径: ")
    form_div &lt;= html.INPUT(id="circle1_radius", value="141.4")  # 默认值141.4
    form_div &lt;= html.BR()
    
    form_div &lt;= html.LABEL("第二个圆心X坐标: ")
    form_div &lt;= html.INPUT(id="circle2_center_x", value="300")  # 默认值300
    form_div &lt;= html.BR()
    
    form_div &lt;= html.LABEL("第二个圆心Y坐标: ")
    form_div &lt;= html.INPUT(id="circle2_center_y", value="300")  # 默认值300
    form_div &lt;= html.BR()
    
    form_div &lt;= html.LABEL("第二个圆半径: ")
    form_div &lt;= html.INPUT(id="circle2_radius", value="141.4")  # 默认值141.4
    form_div &lt;= html.BR()

    form_div &lt;= html.LABEL("第三个圆心X坐标: ")
    form_div &lt;= html.INPUT(id="circle3_center_x", value="400")  # 默认值400
    form_div &lt;= html.BR()

    form_div &lt;= html.LABEL("第三个圆心Y坐标: ")
    form_div &lt;= html.INPUT(id="circle3_center_y", value="400")  # 默认值400
    form_div &lt;= html.BR()

    form_div &lt;= html.LABEL("第三个圆半径: ")
    form_div &lt;= html.INPUT(id="circle3_radius", value="141.4")  # 默认值141.4
    form_div &lt;= html.BR()
    
    # 创建提交按钮
    form_div &lt;= html.BUTTON("提交", id="submit-btn")
    
    brython_div &lt;= form_div

# 获取用户输入的圆心和半径
def get_user_input():
    circle1_center_x = float(doc["circle1_center_x"].value)
    circle1_center_y = float(doc["circle1_center_y"].value)
    circle1_radius = float(doc["circle1_radius"].value)
    
    circle2_center_x = float(doc["circle2_center_x"].value)
    circle2_center_y = float(doc["circle2_center_y"].value)
    circle2_radius = float(doc["circle2_radius"].value)
    
    circle3_center_x = float(doc["circle3_center_x"].value)
    circle3_center_y = float(doc["circle3_center_y"].value)
    circle3_radius = float(doc["circle3_radius"].value)
    
    return (circle1_center_x, circle1_center_y, circle1_radius), (circle2_center_x, circle2_center_y, circle2_radius), (circle3_center_x, circle3_center_y, circle3_radius)

# 画多个圆并填充区域
def draw_circles_and_fill_regions(circle1_center, circle1_radius, circle2_center, circle2_radius, circle3_center, circle3_radius):
    # 清除画布，防止重叠
    ctx.clearRect(0, 0, 600, 600)
    
    # 绘制三个圆并填充其区域
    ctx.strokeStyle = 'black'
    
    # 第一个圆
    ctx.fillStyle = 'green'  # 第一个圆的填充颜色
    ctx.beginPath()
    ctx.arc(circle1_center[0], circle1_center[1], circle1_radius, 0, 2 * math.pi)
    ctx.fill()  # 填充圆
    ctx.stroke()

    # 第二个圆
    ctx.fillStyle = 'red'  # 第二个圆的填充颜色
    ctx.beginPath()
    ctx.arc(circle2_center[0], circle2_center[1], circle2_radius, 0, 2 * math.pi)
    ctx.fill()  # 填充圆
    ctx.stroke()

    # 第三个圆
    ctx.fillStyle = 'yellow'  # 第三个圆的填充颜色
    ctx.beginPath()
    ctx.arc(circle3_center[0], circle3_center[1], circle3_radius, 0, 2 * math.pi)
    ctx.fill()  # 填充圆
    ctx.stroke()

    # 判断点是否在第一个圆内
    def point_in_circle1(x, y):
        cx, cy, r = circle1_center[0], circle1_center[1], circle1_radius
        return (x - cx) ** 2 + (y - cy) ** 2 &lt; r ** 2

    # 判断点是否在第二个圆内
    def point_in_circle2(x, y):
        cx, cy, r = circle2_center[0], circle2_center[1], circle2_radius
        return (x - cx) ** 2 + (y - cy) ** 2 &lt; r ** 2
    
    # 判断点是否在第三个圆内
    def point_in_circle3(x, y):
        cx, cy, r = circle3_center[0], circle3_center[1], circle3_radius
        return (x - cx) ** 2 + (y - cy) ** 2 &lt; r ** 2

    # 根据区域确定颜色
    def get_region_color(x, y):
        # 判断点在哪些圆内
        in_circle1 = point_in_circle1(x, y)
        in_circle2 = point_in_circle2(x, y)
        in_circle3 = point_in_circle3(x, y)

        # 三个区域：
        if in_circle1 and not in_circle2 and not in_circle3:
            return 'green'  # 只在第一个圆内，填充绿色
        elif in_circle2 and not in_circle1 and not in_circle3:
            return 'red'  # 只在第二个圆内，填充红色
        elif in_circle3 and not in_circle1 and not in_circle2:
            return 'yellow'  # 只在第三个圆内，填充黄色
        elif in_circle1 and in_circle2 and not in_circle3:
            return 'blue'  # 在两个圆交集区域，填充蓝色
        elif in_circle1 and in_circle3 and not in_circle2:
            return 'purple'  # 在第一个和第三个圆交集区域，填充紫色
        elif in_circle2 and in_circle3 and not in_circle1:
            return 'orange'  # 在第二个和第三个圆交集区域，填充橙色
        elif in_circle1 and in_circle2 and in_circle3:
            return 'brown'  # 在三个圆交集区域，填充棕色
        else:
            return None  # 三个圆之外不填充

    # 扫描并填充区域
    def scan_and_draw():
        for x in range(0, 600, grid_size):  # 遍历画布范围，左到右
            for y in range(0, 600, grid_size):  # 从上到下
                color = get_region_color(x, y)  # 获取当前点的区域颜色
                if color:  # 只有当颜色不为 None 时才绘制
                    # 绘制填充的矩形
                    ctx.fillStyle = color
                    ctx.fillRect(x, y, grid_size, grid_size)  # 填充一个区域的矩形，而不是小圆点

    # 开始扫描并绘制颜色
    scan_and_draw()

# 创建输入表单
create_input_form()

# 设置点击提交按钮的事件
def on_submit(event):
    # 获取用户输入的圆心坐标和半径
    circle1_center, circle2_center, circle3_center = get_user_input()

    # 调用函数绘制圆并填充区域
    draw_circles_and_fill_regions(
        circle1_center[0:2], circle1_center[2],
        circle2_center[0:2], circle2_center[2],
        circle3_center[0:2], circle3_center[2]
    )

# 绑定点击提交按钮事件
doc["submit-btn"].bind("click", on_submit)</pre>
<p></p><h2>w15</h2>
<p><span>題目一: 請利用 Gist 與 Brython 程式環境, 在個人的課程網站中新增一個頁面, 標題為 w15, 以"從 1 累加到 100"作為 anchor 的連結標題, 使用者點擊該連結之後, 可從各自的 Brython 頁面執行程式.</span></p>
<p><a href="https://mdecp2024.github.io/hw-ffwfggw/content/Brython.html?src=https://gist.githubusercontent.com/ffwfggw/ae02f83a1ccfe1922422a57a40bec8e2/raw/62ffb81d5aeb737e7aa75324f760903d902fb3c5/1.py">從 1 累加到 100</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 用來計算從 1 累加到 100 的總和
total = sum(range(1, 101))

# 顯示結果
print("從 1 累加到 100 的總和是:", total)
</pre>
<p></p>
<p><a href="https://mdecp2024.github.io/hw-ffwfggw/content/Brython.html?src=https://gist.githubusercontent.com/ffwfggw/ae02f83a1ccfe1922422a57a40bec8e2/raw/b39c0b2e41e5a91ecfaddef9eb6995101185c65d/2.py">範例</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義 addto 函數來進行累加
def addto(start, end):
    return sum(range(start, end + 1))

# 使用 addto 函數計算從 1 累加到 100 的總和
total = addto(1, 100)

# 顯示結果
print("從 1 累加到 100 的總和是:", total)
</pre>
<p></p><h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<p></p><h3>HW 2 Exam</h3>
<h3>w16_exam1</h3>
<p>請在個人網頁標題為 "HW 2 Exam" 頁面之後, 加上一個第三階的頁面, 標題為 "w16_exam1".</p>
<p>並在 "w16_exam1" 頁面中完成下列隨堂考試的要求 (20%):</p>
<p>本項任務必須拍攝過程操作影片, 且<span>片頭要先切換到個人的課程網頁 "About" 頁面, 顯示操作者的學號與個人網頁連結</span>.</p>
<p>題目: 請以<span>自己的學號最後四碼</span>作為繪圖的座標原點, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖座標原點), 並以 pixel=2 的黑色直線分別利用 Brython 繪圖, 標示出向右為正的 X 軸, 以及向下為正的 Y 軸, 並且利用文字標示出原點座標 (例如: (39, 32)), 之後請自選最左側圖形的起始點座標, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像 (<a href="https://www.ccplusmedia.com/wp-content/uploads/2019/10/creative-ad_landscape3.jpg">圖片來源</a>).</p>
<p><a href="https://mdecp2024.github.io/hw-ffwfggw/content/Brython.html?src=https://gist.githubusercontent.com/ffwfggw/3b1b046958d45ff25187296ac626575b/raw/71f0192671db9f7e6d3db1d67300a0a832cb5044/1.py">答</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, html
import math
 
# 初始化 HTML，確保 canvas 元素存在
def setup_canvas():
    if not document.querySelector("#my_canvas"):
        canvas = html.CANVAS(id="my_canvas", width=800, height=600)
        document &lt;= canvas
 
setup_canvas()

# Set up canvas
canvas = document["my_canvas"]
ctx = canvas.getContext("2d")

# Set origin (32, 16)
origin_x, origin_y = 32, 16    #自己學號 修改

# Draw X-axis
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(500, origin_y)
ctx.strokeStyle = "black"
ctx.lineWidth = 2
ctx.stroke()

# Draw Y-axis
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(origin_x, 300)
ctx.stroke()

# Label origin
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText("(32, 16)", origin_x + 5, origin_y - 5)

# Draw shapes
# Adjusted placement to fix alignment issue

# Hexagon (Orange)
hex_x, hex_y = 100, 100
ctx.beginPath()
for i in range(6):
    angle = i * (2 * math.pi / 6)
    x = hex_x + 30 * math.cos(angle)
    y = hex_y + 30 * math.sin(angle)
    if i == 0:
        ctx.moveTo(x, y)
    else:
        ctx.lineTo(x, y)
ctx.closePath()
ctx.fillStyle = "orange"
ctx.fill()

# Diamond (Teal)
ctx.beginPath()
ctx.moveTo(160, 70)
ctx.lineTo(180, 100)
ctx.lineTo(160, 130)
ctx.lineTo(140, 100)
ctx.closePath()
ctx.fillStyle = "teal"
ctx.fill()

# Triangle (Teal)
ctx.beginPath()
ctx.moveTo(165, 130)
ctx.lineTo(205, 130)
ctx.lineTo(185, 100)
ctx.closePath()
ctx.fillStyle = "blue"
ctx.fill()

# Circle (Pink)
ctx.beginPath()
ctx.arc(230, 100, 30, 0, 2 * math.pi)
ctx.fillStyle = "pink"
ctx.fill()

# Square (Yellow)
ctx.beginPath()
ctx.rect(265, 75, 50, 50)
ctx.fillStyle = "yellow"
ctx.fill()

# Rectangle (Blue)
ctx.beginPath()
ctx.rect(320, 90, 60, 20)
ctx.fillStyle = "Blue"
ctx.fill()</pre>
<p></p><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p><h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam2</h3>
<p>請在個人網頁標題為 "HW 3 Exam" 頁面之後, 加上一個第三階的頁面, 標題為 "w16_exam2".</p>
<p>並在 "w16_exam2" 頁面中完成下列隨堂考試的要求 (20%):</p>
<p>本項任務必須拍攝過程操作影片, 且<span>片頭要先切換到個人的課程網頁 "About" 頁面, 顯示操作者的學號與個人網頁連結</span>.</p>
<p>題目一: 請以<span>自己的學號最後四碼</span>作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用<span> </span><span>pixel=2 的藍色直線</span>,<span> </span><span>自訂迷宮畫布大小</span>, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像).</p>
<p>答</p><h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p><h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>